# from Linked_List_Construction import __init__

# def test___init___case_1():
#     assert __init__(classMethodsToCall=[{'arguments': ['5'], 'method': 'setHead'}, {'arguments': ['4'], 'method': 'setHead'}, {'arguments': ['3'], 'method': 'setHead'}, {'arguments': ['2'], 'method': 'setHead'}, {'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['4'], 'method': 'setHead'}, {'arguments': ['6'], 'method': 'setTail'}, {'arguments': ['6', '3'], 'method': 'insertBefore'}, {'arguments': ['6', '3-2'], 'method': 'insertAfter'}, {'arguments': [1, '3-3'], 'method': 'insertAtPosition'}, {'arguments': [3], 'method': 'removeNodesWithValue'}, {'arguments': ['2'], 'method': 'remove'}, {'arguments': [5], 'method': 'containsNodeWithValue'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '3-2', 'next': None, 'prev': None, 'value': 3}, {'id': '3-3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}, {'id': '5', 'next': None, 'prev': None, 'value': 5}, {'id': '6', 'next': None, 'prev': None, 'value': 6}]) == [{'arguments': ['5'], 'linkedList': {'head': '5', 'nodes': [{'id': '5', 'next': None, 'prev': None, 'value': 5}], 'tail': '5'}, 'method': 'setHead', 'output': None}, {'arguments': ['4'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '5', 'prev': None, 'value': 4}, {'id': '5', 'next': None, 'prev': '4', 'value': 5}], 'tail': '5'}, 'method': 'setHead', 'output': None}, {'arguments': ['3'], 'linkedList': {'head': '3', 'nodes': [{'id': '3', 'next': '4', 'prev': None, 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': None, 'prev': '4', 'value': 5}], 'tail': '5'}, 'method': 'setHead', 'output': None}, {'arguments': ['2'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': None, 'prev': '4', 'value': 5}], 'tail': '5'}, 'method': 'setHead', 'output': None}, {'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': None, 'prev': '4', 'value': 5}], 'tail': '5'}, 'method': 'setHead', 'output': None}, {'arguments': ['4'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '1', 'prev': None, 'value': 4}, {'id': '1', 'next': '2', 'prev': '4', 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '5', 'prev': '2', 'value': 3}, {'id': '5', 'next': None, 'prev': '3', 'value': 5}], 'tail': '5'}, 'method': 'setHead', 'output': None}, {'arguments': ['6'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '1', 'prev': None, 'value': 4}, {'id': '1', 'next': '2', 'prev': '4', 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '5', 'prev': '2', 'value': 3}, {'id': '5', 'next': '6', 'prev': '3', 'value': 5}, {'id': '6', 'next': None, 'prev': '5', 'value': 6}], 'tail': '6'}, 'method': 'setTail', 'output': None}, {'arguments': ['6', '3'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '1', 'prev': None, 'value': 4}, {'id': '1', 'next': '2', 'prev': '4', 'value': 1}, {'id': '2', 'next': '5', 'prev': '1', 'value': 2}, {'id': '5', 'next': '3', 'prev': '2', 'value': 5}, {'id': '3', 'next': '6', 'prev': '5', 'value': 3}, {'id': '6', 'next': None, 'prev': '3', 'value': 6}], 'tail': '6'}, 'method': 'insertBefore', 'output': None}, {'arguments': ['6', '3-2'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '1', 'prev': None, 'value': 4}, {'id': '1', 'next': '2', 'prev': '4', 'value': 1}, {'id': '2', 'next': '5', 'prev': '1', 'value': 2}, {'id': '5', 'next': '3', 'prev': '2', 'value': 5}, {'id': '3', 'next': '6', 'prev': '5', 'value': 3}, {'id': '6', 'next': '3-2', 'prev': '3', 'value': 6}, {'id': '3-2', 'next': None, 'prev': '6', 'value': 3}], 'tail': '3-2'}, 'method': 'insertAfter', 'output': None}, {'arguments': [1, '3-3'], 'linkedList': {'head': '3', 'nodes': [{'id': '3', 'next': '4', 'prev': None, 'value': 3}, {'id': '4', 'next': '1', 'prev': '3', 'value': 4}, {'id': '1', 'next': '2', 'prev': '4', 'value': 1}, {'id': '2', 'next': '5', 'prev': '1', 'value': 2}, {'id': '5', 'next': '3-2', 'prev': '2', 'value': 5}, {'id': '3-2', 'next': '6', 'prev': '5', 'value': 3}, {'id': '6', 'next': '3-3', 'prev': '3-2', 'value': 6}, {'id': '3-3', 'next': None, 'prev': '6', 'value': 3}], 'tail': '3-3'}, 'method': 'insertAtPosition', 'output': None}, {'arguments': [3], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '1', 'prev': None, 'value': 4}, {'id': '1', 'next': '2', 'prev': '4', 'value': 1}, {'id': '2', 'next': '5', 'prev': '1', 'value': 2}, {'id': '5', 'next': '6', 'prev': '2', 'value': 5}, {'id': '6', 'next': None, 'prev': '5', 'value': 6}], 'tail': '6'}, 'method': 'removeNodesWithValue', 'output': None}, {'arguments': ['2'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '1', 'prev': None, 'value': 4}, {'id': '1', 'next': '5', 'prev': '4', 'value': 1}, {'id': '5', 'next': '6', 'prev': '1', 'value': 5}, {'id': '6', 'next': None, 'prev': '5', 'value': 6}], 'tail': '6'}, 'method': 'remove', 'output': None}, {'arguments': [5], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '1', 'prev': None, 'value': 4}, {'id': '1', 'next': '5', 'prev': '4', 'value': 1}, {'id': '5', 'next': '6', 'prev': '1', 'value': 5}, {'id': '6', 'next': None, 'prev': '5', 'value': 6}], 'tail': '6'}, 'method': 'containsNodeWithValue', 'output': True}]

# def test___init___case_2():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}]

# def test___init___case_3():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setTail'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setTail', 'output': None}]

# def test___init___case_4():
#     assert __init__(classMethodsToCall=[{'arguments': [1, '1'], 'method': 'insertAtPosition'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}]) == [{'arguments': [1, '1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'insertAtPosition', 'output': None}]

# def test___init___case_5():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['2'], 'method': 'setTail'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'setTail', 'output': None}]

# def test___init___case_6():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['2'], 'method': 'setHead'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['2'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '1', 'prev': None, 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}]

# def test___init___case_7():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}]

# def test___init___case_8():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertBefore'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '1', 'prev': None, 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'insertBefore', 'output': None}]

# def test___init___case_9():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}]

# def test___init___case_10():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setTail'}, {'arguments': ['1', '2'], 'method': 'insertBefore'}, {'arguments': ['2', '3'], 'method': 'insertBefore'}, {'arguments': ['3', '4'], 'method': 'insertBefore'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setTail', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '1', 'prev': None, 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'insertBefore', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '3', 'nodes': [{'id': '3', 'next': '2', 'prev': None, 'value': 3}, {'id': '2', 'next': '1', 'prev': '3', 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'insertBefore', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '3', 'prev': None, 'value': 4}, {'id': '3', 'next': '2', 'prev': '4', 'value': 3}, {'id': '2', 'next': '1', 'prev': '3', 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'insertBefore', 'output': None}]

# def test___init___case_11():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}, {'arguments': ['1'], 'method': 'setTail'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '1', 'prev': '3', 'value': 4}, {'id': '1', 'next': None, 'prev': '4', 'value': 1}], 'tail': '1'}, 'method': 'setTail', 'output': None}]

# def test___init___case_12():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setTail'}, {'arguments': ['1', '2'], 'method': 'insertBefore'}, {'arguments': ['2', '3'], 'method': 'insertBefore'}, {'arguments': ['3', '4'], 'method': 'insertBefore'}, {'arguments': ['1'], 'method': 'setHead'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setTail', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '1', 'prev': None, 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'insertBefore', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '3', 'nodes': [{'id': '3', 'next': '2', 'prev': None, 'value': 3}, {'id': '2', 'next': '1', 'prev': '3', 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'insertBefore', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '4', 'nodes': [{'id': '4', 'next': '3', 'prev': None, 'value': 4}, {'id': '3', 'next': '2', 'prev': '4', 'value': 3}, {'id': '2', 'next': '1', 'prev': '3', 'value': 2}, {'id': '1', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1'}, 'method': 'insertBefore', 'output': None}, {'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '4', 'prev': None, 'value': 1}, {'id': '4', 'next': '3', 'prev': '1', 'value': 4}, {'id': '3', 'next': '2', 'prev': '4', 'value': 3}, {'id': '2', 'next': None, 'prev': '3', 'value': 2}], 'tail': '2'}, 'method': 'setHead', 'output': None}]

# def test___init___case_13():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}, {'arguments': ['2', '1'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertBefore'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '1', 'prev': None, 'value': 2}, {'id': '1', 'next': '3', 'prev': '2', 'value': 1}, {'id': '3', 'next': '4', 'prev': '1', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '1', 'prev': None, 'value': 2}, {'id': '1', 'next': '4', 'prev': '2', 'value': 1}, {'id': '4', 'next': '3', 'prev': '1', 'value': 4}, {'id': '3', 'next': None, 'prev': '4', 'value': 3}], 'tail': '3'}, 'method': 'insertBefore', 'output': None}]

# def test___init___case_14():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}, {'arguments': ['4', '5'], 'method': 'insertAfter'}, {'arguments': ['5', '6'], 'method': 'insertAfter'}, {'arguments': ['6', '7'], 'method': 'insertAfter'}, {'arguments': [7, '1'], 'method': 'insertAtPosition'}, {'arguments': [1, '1'], 'method': 'insertAtPosition'}, {'arguments': [2, '1'], 'method': 'insertAtPosition'}, {'arguments': [3, '1'], 'method': 'insertAtPosition'}, {'arguments': [4, '1'], 'method': 'insertAtPosition'}, {'arguments': [5, '1'], 'method': 'insertAtPosition'}, {'arguments': [6, '1'], 'method': 'insertAtPosition'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}, {'id': '5', 'next': None, 'prev': None, 'value': 5}, {'id': '6', 'next': None, 'prev': None, 'value': 6}, {'id': '7', 'next': None, 'prev': None, 'value': 7}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['4', '5'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': None, 'prev': '4', 'value': 5}], 'tail': '5'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['5', '6'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': '6', 'prev': '4', 'value': 5}, {'id': '6', 'next': None, 'prev': '5', 'value': 6}], 'tail': '6'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['6', '7'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': '6', 'prev': '4', 'value': 5}, {'id': '6', 'next': '7', 'prev': '5', 'value': 6}, {'id': '7', 'next': None, 'prev': '6', 'value': 7}], 'tail': '7'}, 'method': 'insertAfter', 'output': None}, {'arguments': [7, '1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': '6', 'prev': '4', 'value': 5}, {'id': '6', 'next': '1', 'prev': '5', 'value': 6}, {'id': '1', 'next': '7', 'prev': '6', 'value': 1}, {'id': '7', 'next': None, 'prev': '1', 'value': 7}], 'tail': '7'}, 'method': 'insertAtPosition', 'output': None}, {'arguments': [1, '1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': '6', 'prev': '4', 'value': 5}, {'id': '6', 'next': '7', 'prev': '5', 'value': 6}, {'id': '7', 'next': None, 'prev': '6', 'value': 7}], 'tail': '7'}, 'method': 'insertAtPosition', 'output': None}, {'arguments': [2, '1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': '6', 'prev': '4', 'value': 5}, {'id': '6', 'next': '7', 'prev': '5', 'value': 6}, {'id': '7', 'next': None, 'prev': '6', 'value': 7}], 'tail': '7'}, 'method': 'insertAtPosition', 'output': None}, {'arguments': [3, '1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '1', 'prev': None, 'value': 2}, {'id': '1', 'next': '3', 'prev': '2', 'value': 1}, {'id': '3', 'next': '4', 'prev': '1', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': '6', 'prev': '4', 'value': 5}, {'id': '6', 'next': '7', 'prev': '5', 'value': 6}, {'id': '7', 'next': None, 'prev': '6', 'value': 7}], 'tail': '7'}, 'method': 'insertAtPosition', 'output': None}, {'arguments': [4, '1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '1', 'prev': '2', 'value': 3}, {'id': '1', 'next': '4', 'prev': '3', 'value': 1}, {'id': '4', 'next': '5', 'prev': '1', 'value': 4}, {'id': '5', 'next': '6', 'prev': '4', 'value': 5}, {'id': '6', 'next': '7', 'prev': '5', 'value': 6}, {'id': '7', 'next': None, 'prev': '6', 'value': 7}], 'tail': '7'}, 'method': 'insertAtPosition', 'output': None}, {'arguments': [5, '1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '1', 'prev': '3', 'value': 4}, {'id': '1', 'next': '5', 'prev': '4', 'value': 1}, {'id': '5', 'next': '6', 'prev': '1', 'value': 5}, {'id': '6', 'next': '7', 'prev': '5', 'value': 6}, {'id': '7', 'next': None, 'prev': '6', 'value': 7}], 'tail': '7'}, 'method': 'insertAtPosition', 'output': None}, {'arguments': [6, '1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': '5', 'prev': '3', 'value': 4}, {'id': '5', 'next': '1', 'prev': '4', 'value': 5}, {'id': '1', 'next': '6', 'prev': '5', 'value': 1}, {'id': '6', 'next': '7', 'prev': '1', 'value': 6}, {'id': '7', 'next': None, 'prev': '6', 'value': 7}], 'tail': '7'}, 'method': 'insertAtPosition', 'output': None}]

# def test___init___case_15():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1'], 'method': 'remove'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1'], 'linkedList': {'head': None, 'nodes': [], 'tail': None}, 'method': 'remove', 'output': None}]

# def test___init___case_16():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': [1], 'method': 'removeNodesWithValue'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': [1], 'linkedList': {'head': None, 'nodes': [], 'tail': None}, 'method': 'removeNodesWithValue', 'output': None}]

# def test___init___case_17():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}, {'arguments': ['1'], 'method': 'remove'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['1'], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'remove', 'output': None}]

# def test___init___case_18():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}, {'arguments': ['4'], 'method': 'remove'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'remove', 'output': None}]

# def test___init___case_19():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}, {'arguments': ['2'], 'method': 'remove'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '3', 'prev': None, 'value': 1}, {'id': '3', 'next': '4', 'prev': '1', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'remove', 'output': None}]

# def test___init___case_20():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '1-2'], 'method': 'insertAfter'}, {'arguments': ['1-2', '1-3'], 'method': 'insertAfter'}, {'arguments': ['1-3', '1-4'], 'method': 'insertAfter'}, {'arguments': [1], 'method': 'removeNodesWithValue'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '1-2', 'next': None, 'prev': None, 'value': 1}, {'id': '1-3', 'next': None, 'prev': None, 'value': 1}, {'id': '1-4', 'next': None, 'prev': None, 'value': 1}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '1-2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '1-2', 'prev': None, 'value': 1}, {'id': '1-2', 'next': None, 'prev': '1', 'value': 1}], 'tail': '1-2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['1-2', '1-3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '1-2', 'prev': None, 'value': 1}, {'id': '1-2', 'next': '1-3', 'prev': '1', 'value': 1}, {'id': '1-3', 'next': None, 'prev': '1-2', 'value': 1}], 'tail': '1-3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['1-3', '1-4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '1-2', 'prev': None, 'value': 1}, {'id': '1-2', 'next': '1-3', 'prev': '1', 'value': 1}, {'id': '1-3', 'next': '1-4', 'prev': '1-2', 'value': 1}, {'id': '1-4', 'next': None, 'prev': '1-3', 'value': 1}], 'tail': '1-4'}, 'method': 'insertAfter', 'output': None}, {'arguments': [1], 'linkedList': {'head': None, 'nodes': [], 'tail': None}, 'method': 'removeNodesWithValue', 'output': None}]

# def test___init___case_21():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '1-2'], 'method': 'insertAfter'}, {'arguments': ['1-2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '1-3'], 'method': 'insertAfter'}, {'arguments': ['1-3', '4'], 'method': 'insertAfter'}, {'arguments': [1], 'method': 'removeNodesWithValue'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '1-2', 'next': None, 'prev': None, 'value': 1}, {'id': '1-3', 'next': None, 'prev': None, 'value': 1}, {'id': '1-4', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '1-2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '1-2', 'prev': '1', 'value': 2}, {'id': '1-2', 'next': None, 'prev': '2', 'value': 1}], 'tail': '1-2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['1-2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '1-2', 'prev': '1', 'value': 2}, {'id': '1-2', 'next': '3', 'prev': '2', 'value': 1}, {'id': '3', 'next': None, 'prev': '1-2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '1-3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '1-2', 'prev': '1', 'value': 2}, {'id': '1-2', 'next': '3', 'prev': '2', 'value': 1}, {'id': '3', 'next': '1-3', 'prev': '1-2', 'value': 3}, {'id': '1-3', 'next': None, 'prev': '3', 'value': 1}], 'tail': '1-3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['1-3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '1-2', 'prev': '1', 'value': 2}, {'id': '1-2', 'next': '3', 'prev': '2', 'value': 1}, {'id': '3', 'next': '1-3', 'prev': '1-2', 'value': 3}, {'id': '1-3', 'next': '4', 'prev': '3', 'value': 1}, {'id': '4', 'next': None, 'prev': '1-3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': [1], 'linkedList': {'head': '2', 'nodes': [{'id': '2', 'next': '3', 'prev': None, 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'removeNodesWithValue', 'output': None}]

# def test___init___case_22():
#     assert __init__(classMethodsToCall=[{'arguments': ['1'], 'method': 'setHead'}, {'arguments': ['1', '2'], 'method': 'insertAfter'}, {'arguments': ['2', '3'], 'method': 'insertAfter'}, {'arguments': ['3', '4'], 'method': 'insertAfter'}, {'arguments': [1], 'method': 'containsNodeWithValue'}, {'arguments': [2], 'method': 'containsNodeWithValue'}, {'arguments': [3], 'method': 'containsNodeWithValue'}, {'arguments': [4], 'method': 'containsNodeWithValue'}, {'arguments': [5], 'method': 'containsNodeWithValue'}], nodes=[{'id': '1', 'next': None, 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': None, 'value': 2}, {'id': '3', 'next': None, 'prev': None, 'value': 3}, {'id': '4', 'next': None, 'prev': None, 'value': 4}]) == [{'arguments': ['1'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': None, 'prev': None, 'value': 1}], 'tail': '1'}, 'method': 'setHead', 'output': None}, {'arguments': ['1', '2'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': None, 'prev': '1', 'value': 2}], 'tail': '2'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['2', '3'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': None, 'prev': '2', 'value': 3}], 'tail': '3'}, 'method': 'insertAfter', 'output': None}, {'arguments': ['3', '4'], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'insertAfter', 'output': None}, {'arguments': [1], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'containsNodeWithValue', 'output': True}, {'arguments': [2], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'containsNodeWithValue', 'output': True}, {'arguments': [3], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'containsNodeWithValue', 'output': True}, {'arguments': [4], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'containsNodeWithValue', 'output': True}, {'arguments': [5], 'linkedList': {'head': '1', 'nodes': [{'id': '1', 'next': '2', 'prev': None, 'value': 1}, {'id': '2', 'next': '3', 'prev': '1', 'value': 2}, {'id': '3', 'next': '4', 'prev': '2', 'value': 3}, {'id': '4', 'next': None, 'prev': '3', 'value': 4}], 'tail': '4'}, 'method': 'containsNodeWithValue', 'output': False}]

